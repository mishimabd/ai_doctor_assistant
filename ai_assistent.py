import re
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from groq import Groq
import logging
import psycopg2
from utils import save_phone_to_db, get_phone_number_from_db, save_user_to_db, is_phone_number_in_whitelist, \
    decrement_message_limit

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)
client = Groq(api_key="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")
cyrillic_pattern = re.compile(r'[^\u0400-\u04FF\s.,!?:;\'"()üî¥-]')

conn = psycopg2.connect(
    dbname="virtual_assistant_database",
    user="postgres",
    password="Lg26y0M@x",
    host="91.147.92.32",
)

USER_DATA = {}


async def call_groq_api(messages: list) -> str:
    system_message = {
        "role": "system",
        "content": "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. "
                   "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —á–∏—Å—Ç–æ–º —Ä—É—Å—Å–∫–æ–º, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ "
                   "–∏–ª–∏ –±—É–∫–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∏—Ç–∞–π—Å–∫–∏—Ö, —è–ø–æ–Ω—Å–∫–∏—Ö, –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö). "
                   "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏—Ü–∏–Ω–æ–π –∏ –∑–¥–æ—Ä–æ–≤—å–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π, "
                   "—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –≤ —ç—Ç–æ–º. "
                   "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–∫—Ç–æ—Ä–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. "
                   "–£–∫–∞–∂–∏ –±–æ–ª–µ–∑–Ω—å, —Ä–∞–∑–¥–µ–ª–∏–≤ –µ—ë –ª–∏–Ω–∏—è–º–∏ 'üî¥–ë–û–õ–ï–ó–ù–¨üî¥'.\n"
                   "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É, —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–æ–≤–µ—Ç—ã –ª–∏–Ω–∏—è–º–∏ 'üî¥–°–û–í–ï–¢–´üî¥'. "
                   "–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≤—Å–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ "
                   "–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –±—É–∫–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤."
                   "–ó–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ –∫–æ–Ω–µ—Ü, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –¥–æ–∫—Ç–æ—Ä–∞. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
                   "–û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω–æ –∏ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –ø–æ–≤–æ–¥—É –±–æ–ª–µ–∑–Ω–∏ –∏ —Ç–æ–≥–æ, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç —Å–¥–µ–ª–∞—Ç—å."
                   "–û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∏–∑–±–µ–≥–∞—è —Å–ª–æ–∂–Ω—ã—Ö –∏–ª–∏ –Ω–µ—É–º–µ—Å—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
                   "–î–µ–ª–∞–π –±–æ–ª—å—à–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ç–æ–º, —á—Ç–æ —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–∫—Ç–æ—Ä–∞–º –≤ –ª–µ—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –∏—Ö –∫ –¥–æ–∫—Ç–æ—Ä–∞–º –ø–æ –∏—Ö –±–æ–ª–µ–∑–Ω—è–º."
    }

    try:
        conversation_with_system_message = [system_message] + messages

        chat_completion = client.chat.completions.create(
            messages=conversation_with_system_message,
            model="llama-3.1-70b-versatile"
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        logger.error(f"Error calling Groq API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."


async def ai_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    phone_number = get_phone_number_from_db(user_id)

    if phone_number is None:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞."
        )
        return

    if not is_phone_number_in_whitelist(phone_number):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —á—Ç–æ–±—ã –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.",
        )
        return

    user_message = update.message.text
    logger.info(f"Received message: {user_message}")

    if "conversation_history" not in context.user_data:
        context.user_data["conversation_history"] = []

    if user_message == "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é üóëÔ∏è":
        await clear_history(update, context)
        return

    context.user_data["conversation_history"].append({
        "role": "user",
        "content": user_message
    })
    remaining_limit = decrement_message_limit(user_id)

    # Check if the user has reached their limit
    if remaining_limit == 0:
        await update.message.reply_text(
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
        )
        return
    # Send a temporary loading message
    loading_message = await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    while True:
        ai_response = await call_groq_api(context.user_data["conversation_history"])
        logger.info(f"AI response: {ai_response}")

        if not cyrillic_pattern.search(ai_response):
            break
        logger.info("Detected non-Cyrillic characters in the AI response. Regenerating response...")

    context.user_data["conversation_history"].append({
        "role": "assistant",
        "content": ai_response
    })

    await context.bot.edit_message_text(text=ai_response, chat_id=update.message.chat_id,
                                        message_id=loading_message.message_id)


async def ai_assistant_respond(update: Update, context) -> None:
    assistant_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.üè•\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö.ü©∫\n"
        "–î–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –±—É–¥—É —Ä–∞–¥ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å!"
    )
    await update.message.reply_text(assistant_message)


# Updated start_button function
async def start_button(update: Update, context: CallbackContext) -> None:
    context.user_data["is_text_for_adding"] = False
    user = update.message.from_user

    # Save user's Telegram ID and username to the database
    save_user_to_db(user.id, user.username)

    # Define the buttons for the bot's reply
    buttons = [
        [KeyboardButton("–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ")],
        [KeyboardButton("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üìñ")],
        [KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é üóëÔ∏è")],
        [KeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ò–ú–¢ üèãÔ∏è")],
        [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", request_contact=True)],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    # Reply with a greeting message
    await update.message.reply_text(
        f"üëã–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
        reply_markup=reply_markup, parse_mode="HTML"
    )

async def ask_weight(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    context.user_data["is_bmi_active"] = True  # Set BMI active flag to True when button is pressed
    USER_DATA[user.id] = {}  # Initialize user data for BMI
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):")

# Function to handle BMI inputs for both weight and height (height in centimeters)
async def handle_bmi_input(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_input = update.message.text

    if not context.user_data.get("is_bmi_active", False):
        # If BMI is not active, let the AI assistant handle it
        await ai_assistant(update, context)
        return

    # Proceed with BMI logic if the flag is set to True
    if "weight" not in USER_DATA[user_id]:
        try:
            weight = float(user_input)
            USER_DATA[user_id]["weight"] = weight
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.")
    else:
        try:
            height_cm = float(user_input)
            USER_DATA[user_id]["height"] = height_cm

            weight = USER_DATA[user_id]["weight"]
            if height_cm <= 0:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞.")
                return

            # Convert height from centimeters to meters
            height_m = height_cm / 100.0

            # Calculate BMI
            bmi = calculate_bmi(weight, height_m)
            category = bmi_category(bmi)

            # Reset BMI flag after calculation is complete
            context.user_data["is_bmi_active"] = False

            # Respond with the BMI result
            await update.message.reply_text(f"–í–∞—à –ò–ú–¢: {bmi:.2f}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞.")

# BMI calculation functions
def calculate_bmi(weight, height):
    """ Calculate BMI from weight (kg) and height (m). """
    return weight / (height ** 2)

def bmi_category(bmi):
    """ Determine the BMI category based on the calculated BMI. """
    if bmi < 18.5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
    elif 18.5 <= bmi < 24.9:
        return "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
    elif 25 <= bmi < 29.9:
        return "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
    else:
        return "–û–∂–∏—Ä–µ–Ω–∏–µ"

async def clear_history(update: Update, context: CallbackContext) -> None:
    context.user_data["conversation_history"] = []
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.")


async def contact_handler(update: Update, context: CallbackContext) -> None:
    user_contact = update.message.contact
    phone_number = user_contact.phone_number
    user_id = update.message.from_user.id

    await save_phone_to_db(user_id, phone_number)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")


async def close_connection() -> None:
    if conn:
        conn.close()
