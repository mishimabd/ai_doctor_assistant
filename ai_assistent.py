from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from groq import Groq
import logging

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

client = Groq(api_key="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")


async def call_groq_api(messages: list) -> str:
    # System message to guide the AI's responses
    system_message = {
        "role": "system",
        "content": "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. "
                   "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤! "
                   "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏—Ü–∏–Ω–æ–π, –∏ —Å –∑–¥–æ—Ä–æ–≤—å—è–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ "
                   "–ø—Ä–∏–Ω–∏–º–∞–π, —Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å –≤ —ç—Ç–æ–º. "
                   "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–∫—Ç–æ—Ä–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. "
                   "–£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å, —Ä–∞–∑–¥–µ–ª–∏–≤ –µ—ë –ª–∏–Ω–∏—è–º–∏ 'üî¥–ë–û–õ–ï–ó–ù–¨üî¥'.\n"
                   "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É, —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–æ–≤–µ—Ç—ã –ª–∏–Ω–∏—è–º–∏ 'üî¥–°–û–í–ï–¢–´üî¥'. "
                   "–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±—ã –≤—Å–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    }

    try:
        # Add system message at the beginning of the conversation history
        conversation_with_system_message = [system_message] + messages

        chat_completion = client.chat.completions.create(
            messages=conversation_with_system_message,
            model="llama-3.1-70b-versatile"
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        logger.error(f"Error calling Groq API: {e}")
        return "Sorry, I couldn't process your request."


# Define the Telegram bot function
async def ai_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    logger.info(f"Received message: {user_message}")

    # Retrieve conversation history from user_data
    if "conversation_history" not in context.user_data:
        context.user_data["conversation_history"] = []

    if user_message.lower() == "/clear":
        await clear_history(update, context)
        return

    # Append user message to conversation history
    context.user_data["conversation_history"].append({
        "role": "user",
        "content": user_message
    })

    # Get the response from the AI
    ai_response = await call_groq_api(context.user_data["conversation_history"])
    logger.info(f"AI response: {ai_response}")

    # Append AI response to conversation history
    context.user_data["conversation_history"].append({
        "role": "assistant",
        "content": ai_response
    })

    await update.message.reply_text(ai_response)


async def ai_assistant_respond(update: Update, context) -> None:
    assistant_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.üè•\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö.ü©∫\n"
        "–î–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –±—É–¥—É —Ä–∞–¥ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å /clear, —á—Ç–æ–±—ã —è –∑–∞–±—ã–ª –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    await update.message.reply_text(assistant_message)


async def under_development(update: Update, context) -> None:
    under_development_message = "–Ø –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...üõ†"
    await update.message.reply_text(under_development_message)


async def start_button(update: Update, context: CallbackContext) -> None:
    context.user_data["is_text_for_adding"] = False
    user = update.message.from_user
    buttons = [
        [KeyboardButton("–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ")],
        [KeyboardButton("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üìñ")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
        reply_markup=reply_markup, parse_mode="HTML"
    )


async def clear_history(update: Update, context: CallbackContext) -> None:
    context.user_data["conversation_history"] = []
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.")