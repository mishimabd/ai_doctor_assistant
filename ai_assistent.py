from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from groq import Groq
import logging

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

client = Groq(api_key="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")


async def call_groq_api(message_content: str) -> str:
    try:
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. "
                               "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤!"
                               "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏—Ü–∏–Ω–æ–π, –∏ —Å –∑–¥–æ—Ä–æ–≤—å—è–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ"
                               "–ø—Ä–∏–Ω–∏–º–∞–π, —Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å –≤ —ç—Ç–æ–º."
                               "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–∫—Ç–æ—Ä–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. "
                               "–£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å, —Ä–∞–∑–¥–µ–ª–∏–≤ –µ—ë –ª–∏–Ω–∏—è–º–∏ 'üî¥–ë–û–õ–ï–ó–ù–¨üî¥'.\n"
                               "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É, —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–æ–≤–µ—Ç—ã –ª–∏–Ω–∏—è–º–∏ 'üî¥–°–û–í–ï–¢–´üî¥'."
                               "–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±—ã –≤—Å–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."

                },
                {
                    "role": "user",
                    "content": message_content
                }
            ],
            model="llama-3.1-70b-versatile"
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        logger.error(f"Error calling Groq API: {e}")
        return "Sorry, I couldn't process your request."


# Define the Telegram bot function
async def ai_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    logger.info(f"Received message: {user_message}")
    ai_response = await call_groq_api(user_message)
    logger.info(f"AI response: {ai_response}")
    await update.message.reply_text(ai_response)


async def ai_assistant_respond(update: Update, context) -> None:
    assistant_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.üè•\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö.ü©∫\n"
        "–î–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –±—É–¥—É —Ä–∞–¥ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å!"
    )
    await update.message.reply_text(assistant_message)



async def under_development(update: Update, context) -> None:
    under_development_message = "–Ø –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...üõ†"
    await update.message.reply_text(under_development_message)


async def start_button(update: Update, context: CallbackContext) -> None:
    context.user_data["is_text_for_adding"] = False
    user = update.message.from_user
    buttons = [
        [KeyboardButton("–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ <b>Green Clinic</b>üíö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup, parse_mode="HTML"
    )