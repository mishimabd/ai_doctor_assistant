import re

from openai import OpenAI
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, CallbackContext
import logging
from utils import save_phone_to_db, save_user_to_db

USER_DATA = {}
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Set your OpenAI API key
client = OpenAI(api_key="")

async def call_gpt_api(messages: list) -> str:
    system_message = {
        "role": "system",
        "content": (
        "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. "
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏—Ü–∏–Ω–æ–π –∏ –∑–¥–æ—Ä–æ–≤—å–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —Å–æ–æ–±—â–∏, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º, –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. "
        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥–æ–∫—Ç–æ—Ä–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ–ø–∏—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö —Ñ–∞–∫—Ç–∞—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
        "–û–±—ä—è—Å–Ω—è–π –≤—Å–µ —à–∞–≥–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –¥–æ–∫—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º."
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å—ë –Ω–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∏–∑–±–µ–≥–∞—è –∏–∑–ª–∏—à–Ω–µ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
        "–ù–µ –∑–∞–±—ã–≤–∞–π —É—Ç–æ—á–Ω—è—Ç—å, –µ—Å–ª–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ª–µ—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞, –∏ –≤—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏."
        "–û—Ç–≤–µ—á–∞–π –≤ —è—Å–Ω–æ–º –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã –∏ –∏–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑. "
        "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏ –≤—Å—ë, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –±–æ–ª–µ–∑–Ω–∏, –∏ –ø–æ–º–æ–≥–∏ –¥–æ–∫—Ç–æ—Ä—É –≤ –ª–µ—á–µ–Ω–∏–∏. "
        "–ü–æ–º–Ω–∏, —á—Ç–æ —Ç–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –¥–æ–∫—Ç–æ—Ä—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–∞—Ü–∏–µ–Ω—Ç–∞."
    )
    }

    try:
        conversation_with_system_message = [system_message] + messages

        # Call the API
        response = client.chat.completions.create(
            model="gpt-4",
            messages=conversation_with_system_message
        )

        # Use attribute access for the ChatCompletion object
        ai_response_content = response.choices[0].message.content
        return ai_response_content

    except Exception as e:
        logger.error(f"Error calling OpenAI API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."


async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["conversation_history"] = []
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞! üóëÔ∏è")


async def ai_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_message = update.message.text

    logger.info(f"Received message from {user_id}: {user_message}")

    if "conversation_history" not in context.user_data:
        context.user_data["conversation_history"] = []

    if user_message == "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é üóëÔ∏è":
        await clear_history(update, context)
        return

    context.user_data["conversation_history"].append({
        "role": "user",
        "content": user_message
    })

    loading_message = await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É!")
    return
    ai_response = await call_gpt_api(context.user_data["conversation_history"])
    logger.info(f"AI response: {ai_response}")

    context.user_data["conversation_history"].append({
        "role": "assistant",
        "content": ai_response
    })

    await context.bot.edit_message_text(
        text=ai_response,
        chat_id=update.message.chat_id,
        message_id=loading_message.message_id
    )


async def ai_assistant_respond(update: Update, context) -> None:
    assistant_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.üè•\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö.ü©∫\n"
        "–î–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –±—É–¥—É —Ä–∞–¥ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å!"
    )
    await update.message.reply_text(assistant_message)


async def start_button(update: Update, context: CallbackContext) -> None:
    context.user_data["is_text_for_adding"] = False
    user = update.message.from_user
    save_user_to_db(user.id, user.username)
    buttons = [
        # [KeyboardButton("–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ")],
        # [KeyboardButton("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üìñ")],
        # [KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é üóëÔ∏è")],
        # [KeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ò–ú–¢ üèãÔ∏è")],
        # [KeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–ö–§ ü¶†")],
        # [KeyboardButton("–ê–Ω–∞–ª–∏–∑ –≠–ö–ì")],
        # [KeyboardButton("–ê–Ω–∞–ª–∏–∑ –ú–†–¢")],
        [KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞ –ª–µ–≥–∫–∏—Ö")],
        # [KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")],
        # [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", request_contact=True)],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await update.message.reply_text(
        f"üëã–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}!",
        reply_markup=reply_markup, parse_mode="HTML"
    )


async def clear_history(update: Update, context: CallbackContext) -> None:
    context.user_data["conversation_history"] = []
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.")


async def contact_handler(update: Update, context: CallbackContext) -> None:
    user_contact = update.message.contact
    phone_number = user_contact.phone_number
    user_id = update.message.chat_id

    await save_phone_to_db(user_id, phone_number)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
