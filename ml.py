import os
import aiohttp
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler


async def receive_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # Get the photo
    photo = update.message.photo[-1]  # Get the highest resolution photo
    file = await context.bot.get_file(photo.file_id)

    # Download the image as a byte array (no need to save on disk)
    image_data = await file.download_as_bytearray()

    # Send the image to the prediction endpoint
    async with aiohttp.ClientSession() as session:
        form_data = aiohttp.FormData()
        form_data.add_field('file', image_data, filename='image.jpg')  # Adjust the filename if needed

        async with session.post('http://91.147.92.32:9999/predict', data=form_data) as response:
            if response.status == 200:
                json_response = await response.json()

                # Extract the relevant fields
                predicted_description = json_response.get('predicted_class_description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
                confidence = json_response.get('confidence', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                # Formulate a more conversational response
                readable_message = (
                    f"üîç *–í–∞—à –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!*\n\n"
                    f"–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                    f"- –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏: *{predicted_description}*.\n"
                    f"- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç *{confidence}*.\n\n"
                    f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å."
                )
                await update.message.reply_text(readable_message, parse_mode='Markdown')
            else:
                await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END  # End the conversation


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def ecg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    from main import WAITING_FOR_IMAGE
    assistant_message = (
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –≠–ö–ì (–∂–∫–≥). –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–∫–∏: üè•"
    )
    photo_path = "example.jpeg"  # Replace with the actual path to your photo

    # Send the message and the example photo
    await update.message.reply_text(assistant_message)
    await update.message.reply_photo(open(photo_path, 'rb'))

    return WAITING_FOR_IMAGE
